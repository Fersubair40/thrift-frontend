[{"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Home.js":"1","/Users/temilayosubair/Downloads/thrift-frontend/src/reportWebVitals.js":"2","/Users/temilayosubair/Downloads/thrift-frontend/src/config/index.js":"3","/Users/temilayosubair/Downloads/thrift-frontend/src/variables/api.js":"4","/Users/temilayosubair/Downloads/thrift-frontend/src/App.js":"5","/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Register.js":"6","/Users/temilayosubair/Downloads/thrift-frontend/src/pages/UserDetails.js":"7"},{"size":2887,"mtime":1609528795019,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607852872289,"results":"10","hashOfConfig":"9"},{"size":51,"mtime":1608151865551,"results":"11","hashOfConfig":"9"},{"size":1529,"mtime":1608541003777,"results":"12","hashOfConfig":"9"},{"size":554,"mtime":1608234602126,"results":"13","hashOfConfig":"9"},{"size":9530,"mtime":1609528262595,"results":"14","hashOfConfig":"9"},{"size":13839,"mtime":1608671540017,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qfrnk0",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Home.js",["34"],"/Users/temilayosubair/Downloads/thrift-frontend/src/reportWebVitals.js",[],["35","36"],"/Users/temilayosubair/Downloads/thrift-frontend/src/config/index.js",[],"/Users/temilayosubair/Downloads/thrift-frontend/src/variables/api.js",["37"],"import axios from \"axios\";\n\nimport { BASE_URL } from \"../config\";\n\naxios.defaults.baseURL = `${BASE_URL}`;\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers[\"Content-Type\"] = \"application/json\";\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    return Promise.reject(error.response);\n  }\n);\n\nconst Api = {\n  register: async (data) => {\n    try {\n      const response = await axios.post(\"/register\", JSON.stringify(data));\n      return response.data;\n    } catch (err) {\n      return err.data;\n    }\n  },\n  getUsers: async () => {\n    try {\n      const response = await axios.get(\"/users\");\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (err) {\n      return err;\n    }\n  },\n  getOneUser: async (user_id) => {\n    try {\n      const response = await axios.get(`/${user_id}/transactions`);\n      if (response.status == 200) {\n        return response;\n      }\n    } catch (err) {\n      return err;\n    }\n  },\n  depost: async (user_id, data) => {\n    try {\n      const response = await axios.put(\n        `/${user_id}/deposit`,\n        JSON.stringify(data)\n      );\n      return response.data;\n    } catch (err) {\n      return err.data;\n    }\n  },\n  withdraw: async (user_id, data) => {\n    try {\n      const response = await axios.put(\n        `/${user_id}/withdraw`,\n        JSON.stringify(data)\n      );\n      return response.data;\n    } catch (err) {\n      return err.data;\n    }\n  },\n};\n\nexport default Api;\n","/Users/temilayosubair/Downloads/thrift-frontend/src/App.js",[],["38","39"],"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Register.js",["40","41"],"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/UserDetails.js",["42","43"],"import React from \"react\";\nimport Api from \"../variables/api\";\n\nimport \"./Home.css\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\n\nexport default function UserDetails() {\n  const [data, setData] = React.useState([]);\n  const [trandata, setTrandata] = React.useState([]);\n  const [showDepositModal, setShowDepositModal] = React.useState(false);\n  const [withdrawModal, showWithdrawModal] = React.useState(false);\n\n  const [account_balance, setaccount_balance] = React.useState(parseInt(\"\"));\n\n  const [depositErrorMessage, setDepositErrorMessage] = React.useState(\"\");\n  const [validationErrors, setvalidationErrors] = React.useState({});\n  const [isSubmitting, setisSubmitting] = React.useState(false);\n  const [depositSuccessMessage, setDepositSuccessMessage] = React.useState(\"\");\n\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const user_id = urlParams.get(\"userId\");\n\n  React.useEffect(() => {\n    if (depositErrorMessage || depositSuccessMessage) {\n      setTimeout(() => {\n        setDepositErrorMessage(\"\");\n        setDepositSuccessMessage(\"\");\n      }, 5000);\n    }\n  }, [depositErrorMessage, depositSuccessMessage]);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await Api.getOneUser(user_id);\n      if (response && response.status === 200) {\n        setData(response.data.data);\n        setTrandata(response.data.data[0].transactions);\n      }\n    })();\n  }, []);\n\n  const toggle = () => {\n    setShowDepositModal(!showDepositModal);\n    showWithdrawModal(!withdrawModal);\n    window.location.reload(false);\n  };\n\n  const onSubmitDeposit = async () => {\n    setisSubmitting(true);\n\n    const data = {\n      account_balance,\n    };\n\n    const response = await Api.depost(user_id, data);\n    if (response && response.status === 200) {\n      setDepositSuccessMessage(response.msg);\n      window.location.reload(false);\n    } else {\n      setDepositErrorMessage(response.msg);\n    }\n\n    setisSubmitting(false);\n  };\n\n  const onSubmitWitrhdraw = async () => {\n    setisSubmitting(true);\n\n    const data = {\n      account_balance,\n    };\n\n    const response = await Api.withdraw(user_id, data);\n    if (response && response.status === 200) {\n      setDepositSuccessMessage(response.msg);\n      window.location.reload(false);\n    } else {\n      setDepositErrorMessage(response.msg);\n    }\n\n    setisSubmitting(false);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <nav className=\"navbar navbar-expand-lg navbar-light \">\n          <div className=\"container\">\n            <a className=\"navbar-brand navs\" href=\"#\">\n              Navbar\n            </a>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#navbarSupportedContent\"\n              aria-controls=\"navbarSupportedContent\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\"\n            >\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div\n              className=\"collapse navbar-collapse\"\n              id=\"navbarSupportedContent\"\n            >\n              <ul className=\"navbar-nav  mb-2 mb-lg-0 ml-auto\">\n                <li className=\"nav-item marg\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-success\"\n                    onClick={() => {\n                      setShowDepositModal(true);\n                    }}\n                  >\n                    Deposit\n                  </button>\n                </li>\n                <li className=\"nav-item\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => {\n                      showWithdrawModal(true);\n                    }}\n                  >\n                    Withdraw\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\\\">\n          {data.map((user) => {\n            return (\n              <div key={user.slug} className=\"col-md-6 mt-4\">\n                <div\n                  className=\"shadow p-3 mb-5 rounded\"\n                  style={{ backgroundColor: \"##525f7f\" }}\n                >\n                  <div className=\"card-body\">\n                    <table className=\"table align-items-center\">\n                      {/* <thead className=\"mb-5\"> ACOOUNT INFOMATION </thead> */}\n                      <tbody className=\"mt-5\">\n                        <tr>\n                          <th>ACOOUNT NAME</th>\n                          <td> {user.FullName} </td>\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <th>ACCOUNT NUMBEr</th>\n                          <td> {user.Account_Number} </td>\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <th> ACOOUNT BALANCE </th>\n                          <td> {user.Account_Balance} </td>\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <th>Mobile Number </th>\n                          <td> {user.Mobile_Number} </td>\n                          <td></td>\n                        </tr>\n                        {/* <tr>\n                          <th>Email</th>\n                          <td> {user.email} </td>\n                          <td></td>\n                        </tr> */}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-5\">\n            <div\n              className=\"shadow p-3 mb-5 rounded\"\n              style={{ backgroundColor: \"##525f7f\" }}\n            >\n              <div className=\"card-body\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Amount</th>\n                      <th className=\"marg\" scope=\"col\">\n                        Transaction Type\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {trandata.map((tran, id) => {\n                      return (\n                        <tr key={id}>\n                          <td> {tran.amount} </td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td\n                            className={`${\n                              tran.transaction_type === \"DEPOSIT\"\n                                ? \"text-success\"\n                                : \"text-danger\"\n                            }`}\n                          >\n                            {\" \"}\n                            {tran.transaction_type}{\" \"}\n                          </td>\n                          <td></td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\">\n        <Modal isOpen={showDepositModal}>\n          <ModalHeader>Deposit</ModalHeader>\n          {depositSuccessMessage && depositSuccessMessage !== \"\" && (\n            <div className=\"alert alert-success\" role=\"alert\">\n              {depositSuccessMessage}\n            </div>\n          )}\n          {depositErrorMessage && depositErrorMessage !== \"\" && (\n            <div className=\"alert alert-success\" role=\"alert\">\n              {depositErrorMessage}\n            </div>\n          )}\n          {validationErrors &&\n            validationErrors[\"account_balance\"] &&\n            Object.entries(validationErrors).length >= 1 && (\n              <div className=\"alert alert-info\" role=\"alert\">\n                <ul>\n                  {Object.keys(validationErrors).map((keys, index) => {\n                    return (\n                      <li key={index} className=\"text-black-50\">\n                        {validationErrors[keys]}\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            )}\n          <ModalBody>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleInputEmail1\" className=\"mb-3\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  onChange={(e) => {\n                    if (!e.target.value) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (e.target.value) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                    setaccount_balance(e.target.value);\n                  }}\n                  value={account_balance}\n                  onBlur={() => {\n                    if (!account_balance) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (account_balance) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                  }}\n                />\n              </div>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            {isSubmitting ? (\n              <button className=\"btn btn-primary\" type=\"button\" disabled>\n                <span\n                  className=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                Loading...\n              </button>\n            ) : (\n              <>\n                <Button color=\"primary\" onClick={onSubmitDeposit}>\n                  Deposit\n                </Button>\n                <Button color=\"danger\" onClick={toggle}>\n                  Cancel\n                </Button>\n              </>\n            )}\n          </ModalFooter>\n        </Modal>\n      </div>\n\n      <div className=\"container\">\n        <Modal isOpen={withdrawModal}>\n          <ModalHeader>Deposit</ModalHeader>\n          {depositSuccessMessage && depositSuccessMessage !== \"\" && (\n            <div className=\"alert alert-info\" role=\"alert\">\n              {depositSuccessMessage}\n            </div>\n          )}\n          {depositErrorMessage && depositErrorMessage !== \"\" && (\n            <div className=\"alert alert-info\" role=\"alert\">\n              {depositErrorMessage}\n            </div>\n          )}\n          {validationErrors &&\n            validationErrors[\"account_balance\"] &&\n            Object.entries(validationErrors).length >= 1 && (\n              <div className=\"alert alert-info\" role=\"alert\">\n                <ul>\n                  {Object.keys(validationErrors).map((keys, index) => {\n                    return (\n                      <li key={index} className=\"text-black-50\">\n                        {validationErrors[keys]}\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            )}\n          <ModalBody>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleInputEmail1\" className=\"mb-3\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  onChange={(e) => {\n                    if (!e.target.value) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (e.target.value) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                    setaccount_balance(e.target.value);\n                  }}\n                  value={account_balance}\n                  onBlur={() => {\n                    if (!account_balance) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (account_balance) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                  }}\n                />\n              </div>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            {isSubmitting ? (\n              <button className=\"btn btn-primary\" type=\"button\" disabled>\n                <span\n                  className=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                Loading...\n              </button>\n            ) : (\n              <>\n                <Button color=\"primary\" onClick={onSubmitWitrhdraw}>\n                  Withdraw\n                </Button>\n                <Button color=\"danger\" onClick={toggle}>\n                  Cancel\n                </Button>\n              </>\n            )}\n          </ModalFooter>\n        </Modal>\n      </div>\n    </>\n  );\n}\n",{"ruleId":"44","severity":1,"message":"45","line":25,"column":11,"nodeType":"46","endLine":25,"endColumn":53},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":40,"column":27,"nodeType":"53","messageId":"54","endLine":40,"endColumn":29},{"ruleId":"47","replacedBy":"55"},{"ruleId":"49","replacedBy":"56"},{"ruleId":"44","severity":1,"message":"45","line":38,"column":13,"nodeType":"46","endLine":38,"endColumn":55},{"ruleId":"51","severity":1,"message":"52","line":148,"column":51,"nodeType":"53","messageId":"54","endLine":148,"endColumn":53},{"ruleId":"57","severity":1,"message":"58","line":41,"column":6,"nodeType":"59","endLine":41,"endColumn":8,"suggestions":"60"},{"ruleId":"44","severity":1,"message":"45","line":90,"column":13,"nodeType":"46","endLine":90,"endColumn":55},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["61"],["62"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'user_id'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [user_id]",{"range":"66","text":"67"},[1485,1487],"[user_id]"]