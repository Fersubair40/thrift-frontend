[{"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Home.js":"1","/Users/temilayosubair/Downloads/thrift-frontend/src/reportWebVitals.js":"2","/Users/temilayosubair/Downloads/thrift-frontend/src/config/index.js":"3","/Users/temilayosubair/Downloads/thrift-frontend/src/variables/api.js":"4","/Users/temilayosubair/Downloads/thrift-frontend/src/App.js":"5","/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Register.js":"6","/Users/temilayosubair/Downloads/thrift-frontend/src/pages/UserDetails.js":"7"},{"size":3389,"mtime":1609677936349,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607852872289,"results":"10","hashOfConfig":"9"},{"size":138,"mtime":1609681773293,"results":"11","hashOfConfig":"9"},{"size":1529,"mtime":1608541003777,"results":"12","hashOfConfig":"9"},{"size":554,"mtime":1608234602126,"results":"13","hashOfConfig":"9"},{"size":9599,"mtime":1609678462229,"results":"14","hashOfConfig":"9"},{"size":14079,"mtime":1609678705610,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"qfrnk0",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"19"},"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Home.js",["36"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Api from \"../variables/api\";\n\nimport \"./Home.css\";\n\nexport default function Home() {\n  const [data, setData] = React.useState([]);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await Api.getUsers();\n      if (response && response.status === 200) {\n        setData(response.data.users);\n        // console.log()\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"container \">\n      <nav className=\"navbar navbar-expand-lg navbar-light \">\n        <div className=\"container\">\n          <a className=\"navbar-brand navs\" href=\"#\">\n            ThriftWithK\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav  mb-2 mb-lg-0 ml-auto justify-content-end\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link text-dark \" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link text-dark\" to=\"/register\">\n                  Create Account\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"mt-5 cards\">\n        <div className=\"row\">\n          {data && data.length >= 1 ? (\n            data.map((user) => (\n              <React.Fragment key={user.slug}>\n                <div key={user.slug} className=\"col-sm-4 mb-2\">\n                  <div\n                    className=\"card shadow-lg p-3 mb-5 rounded\"\n                    style={{ backgroundColor: \"#fff0f0\" }}\n                  >\n                    <div className=\"card-body\">\n                      <h3 className=\"card-title\">{user.Account_Balance}</h3>\n                      <h5 className=\"card-title\">{user.FullName}</h5>\n                      <h6 className=\"card-subtitle mb-2 text-dark\">\n                        Accoount Number:{\" \"}\n                        <span className=\"font-weight-bold text-dark\">\n                          {user.Account_Number}\n                        </span>\n                      </h6>\n                      <p className=\"card-text\">\n                        Package:{\" \"}\n                        <span className=\"text-dark\"> {user.package} </span>{\" \"}\n                      </p>\n                      <p className=\"card-text\">{user.Mobile_Number}</p>\n                      <Link\n                        className=\"text-black\"\n                        to={`/account/?userId=${user.slug}`}\n                      >\n                        {\" \"}\n                        View Transactions{\" \"}\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </React.Fragment>\n            ))\n          ) : (\n            <div className=\"container\">\n              <p>You have not Addded Anyone Yet.</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",["37","38"],"/Users/temilayosubair/Downloads/thrift-frontend/src/reportWebVitals.js",[],"/Users/temilayosubair/Downloads/thrift-frontend/src/config/index.js",[],"/Users/temilayosubair/Downloads/thrift-frontend/src/variables/api.js",["39"],"import axios from \"axios\";\n\nimport { BASE_URL } from \"../config\";\n\naxios.defaults.baseURL = `${BASE_URL}`;\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers[\"Content-Type\"] = \"application/json\";\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    return Promise.reject(error.response);\n  }\n);\n\nconst Api = {\n  register: async (data) => {\n    try {\n      const response = await axios.post(\"/register\", JSON.stringify(data));\n      return response.data;\n    } catch (err) {\n      return err.data;\n    }\n  },\n  getUsers: async () => {\n    try {\n      const response = await axios.get(\"/users\");\n      if (response.status === 200) {\n        return response;\n      }\n    } catch (err) {\n      return err;\n    }\n  },\n  getOneUser: async (user_id) => {\n    try {\n      const response = await axios.get(`/${user_id}/transactions`);\n      if (response.status == 200) {\n        return response;\n      }\n    } catch (err) {\n      return err;\n    }\n  },\n  depost: async (user_id, data) => {\n    try {\n      const response = await axios.put(\n        `/${user_id}/deposit`,\n        JSON.stringify(data)\n      );\n      return response.data;\n    } catch (err) {\n      return err.data;\n    }\n  },\n  withdraw: async (user_id, data) => {\n    try {\n      const response = await axios.put(\n        `/${user_id}/withdraw`,\n        JSON.stringify(data)\n      );\n      return response.data;\n    } catch (err) {\n      return err.data;\n    }\n  },\n};\n\nexport default Api;\n","/Users/temilayosubair/Downloads/thrift-frontend/src/App.js",[],["40","41"],"/Users/temilayosubair/Downloads/thrift-frontend/src/pages/Register.js",["42","43"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Api from \"../variables/api\";\nimport splash from \"../images/splash.png\";\nimport \"./Register.css\";\n\nconst initialValues = {\n  email: \"\",\n  username: \"\",\n  fullname: \"\",\n  mobile_Number: \"\",\n  _package: \"\",\n};\n\nexport default function Register() {\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n  const [visible, setVisible] = React.useState(true);\n  const [validationErrors, setvalidationErrors] = React.useState({});\n  const [isSubmitting, setisSubmitting] = React.useState(false);\n  const [successMessage, setsuccessMessage] = React.useState(\"\");\n\n  let history = useHistory();\n\n  const onDismiss = () => {\n    setVisible(false);\n    setvalidationErrors({});\n    setErrorMessage(\"\");\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <nav className=\"navbar navbar-expand-lg navbar-light \">\n          <div className=\"container\">\n            <a className=\"navbar-brand navs\" href=\"#\">\n              ThriftWithK\n            </a>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#navbarSupportedContent\"\n              aria-controls=\"navbarSupportedContent\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\"\n            >\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div\n              className=\"collapse navbar-collapse\"\n              id=\"navbarSupportedContent\"\n            >\n              <ul className=\"navbar-nav  mb-2 mb-lg-0 ml-auto justify-content-end\">\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link text-dark \" to=\"/\">\n                    Home\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link text-dark\" to=\"/register\">\n                    Create Account\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row g-3\">\n          <div className=\"col-md-6 img .d-none .d-md-block .d-lg-none\">\n            <img className=\"splash\" src={splash} alt=\"splash\" />\n          </div>\n\n          <div className=\"col-md-6 mt-4\">\n            \n            <div className=\"form\">\n            <h3> Register </h3>\n              {successMessage && successMessage !== \"\" && (\n                <div\n                  className=\"alert alert-success\"\n                  isOpen={visible}\n                  toggle={onDismiss}\n                  role=\"alert\"\n                >\n                  {successMessage}\n                </div>\n              )}\n              {errorMessage && errorMessage !== \"\" && (\n                <div\n                  className=\"alert alert-info\"\n                  isOpen={visible}\n                  toggle={onDismiss}\n                  role=\"alert\"\n                >\n                  {errorMessage}\n                </div>\n              )}\n              {validationErrors &&\n                Object.entries(validationErrors).length >= 1 && (\n                  <div\n                    className=\"alert alert-info\"\n                    isOpen={visible}\n                    role=\"alert\"\n                  >\n                    <ul>\n                      {Object.keys(validationErrors).map((keys, index) => {\n                        return (\n                          <li key={index} className=\"text-black-50\">\n                            {validationErrors[keys]}\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                )}\n\n              <Formik\n                initialValues={initialValues}\n                validate={(values) => {\n                  const errors = {};\n                  if (!values.email) {\n                    errors.email = \"Email is required\";\n                  }\n                  if (!values.username) {\n                    errors.username = \"Username is required\";\n                  }\n                  if (!values.fullname) {\n                    errors.fullname = \"Fullname is required\";\n                  }\n                  if (!values.mobile_number) {\n                    errors.mobile_Number = \"Mobile Number is required\";\n                  }\n                  if (!values._package) {\n                    errors._package = \"You must pick a Package\";\n                  }\n                  setvalidationErrors({ ...errors });\n                  return errors;\n                }}\n                onSubmit={async (values) => {\n                  setisSubmitting(true);\n                  values = {\n                    ...values,\n                  };\n                  const response = await Api.register(values);\n                  if (response && response.status == 200) {\n                    setsuccessMessage(response.msg);\n                    history.push(\"/home\");\n                  } else {\n                    setErrorMessage(response.msg);\n                  }\n                  setisSubmitting(false);\n                }}\n              >\n                {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  setFieldValue,\n                }) => (\n                  \n                  <form className=\"row  g-3\" onSubmit={handleSubmit}>\n                    <div class=\"col-md-6\">\n                      <label for=\"inputEmail4\" className=\"form-label\">\n                        Email\n                      </label>\n                      <input\n                        type=\"email\"\n                        className=\"form-control\"\n                        name=\"email\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.email}\n                      />\n                    </div>\n                    <div className=\"col-md-6\">\n                      <label for=\"fullname\" className=\"form-label\">\n                        Fullname\n                      </label>\n                      <input\n                        type=\"name\"\n                        className=\"form-control\"\n                        name=\"fullname\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.fullname}\n                      />\n                    </div>\n                    <div className=\"col-md-6\">\n                      <label for=\"username\" className=\"form-label\">\n                        Username\n                      </label>\n                      <input\n                        type=\"username\"\n                        className=\"form-control\"\n                        name=\"username\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.username}\n                      />\n                    </div>\n\n                    <div className=\"col-md-6\">\n                      <label for=\"mobile\" class=\"form-label\">\n                        Mobile Number\n                      </label>\n                      <input\n                        type=\"number\"\n                        className=\"form-control\"\n                        name=\"mobile_number\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.mobile_number}\n                      />\n                    </div>\n                    <div className=\"col-md-6\">\n                      <label for=\"_package\" class=\"form-label\">\n                        Select Package\n                      </label>\n                      <select\n                        className=\"form-control\"\n                        id=\"_package\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values._package}\n                      >\n                        <option value=\"\">Select A Package</option>\n                        <option value=\"STANDARD\">Standard</option>\n                        <option value=\"PREMIUM\">Premium</option>\n                        <option value=\"PLATINUM\">Platinum</option>\n                        <option value=\"GOLD\">Gold</option>\n                        <option value=\"DIAMOND\">Diamond</option>\n                      </select>\n                    </div>\n                    <div class=\"col-12\">\n                      {isSubmitting ? (\n                        <button\n                          className=\"btn btn-primary\"\n                          type=\"button\"\n                          disabled\n                        >\n                          <span\n                            className=\"spinner-border spinner-border-sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          ></span>\n                          Loading...\n                        </button>\n                      ) : (\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                          Register\n                        </button>\n                      )}\n                    </div>\n                  </form>\n                )}\n              </Formik>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/temilayosubair/Downloads/thrift-frontend/src/pages/UserDetails.js",["44","45"],"import React from \"react\";\nimport Api from \"../variables/api\";\nimport { Link } from \"react-router-dom\";\nimport \"./Home.css\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\n\nexport default function UserDetails() {\n  const [data, setData] = React.useState([]);\n  const [trandata, setTrandata] = React.useState([]);\n  const [showDepositModal, setShowDepositModal] = React.useState(false);\n  const [withdrawModal, showWithdrawModal] = React.useState(false);\n\n  const [account_balance, setaccount_balance] = React.useState(parseInt(\"\"));\n\n  const [depositErrorMessage, setDepositErrorMessage] = React.useState(\"\");\n  const [validationErrors, setvalidationErrors] = React.useState({});\n  const [isSubmitting, setisSubmitting] = React.useState(false);\n  const [depositSuccessMessage, setDepositSuccessMessage] = React.useState(\"\");\n\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const user_id = urlParams.get(\"userId\");\n\n  React.useEffect(() => {\n    if (depositErrorMessage || depositSuccessMessage) {\n      setTimeout(() => {\n        setDepositErrorMessage(\"\");\n        setDepositSuccessMessage(\"\");\n      }, 5000);\n    }\n  }, [depositErrorMessage, depositSuccessMessage]);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await Api.getOneUser(user_id);\n      if (response && response.status === 200) {\n        setData(response.data.data);\n        setTrandata(response.data.data[0].transactions);\n      }\n    })();\n  }, []);\n\n  const toggle = () => {\n    setShowDepositModal(!showDepositModal);\n    showWithdrawModal(!withdrawModal);\n    window.location.reload(false);\n  };\n\n  const onSubmitDeposit = async () => {\n    setisSubmitting(true);\n\n    const data = {\n      account_balance,\n    };\n\n    const response = await Api.depost(user_id, data);\n    if (response && response.status === 200) {\n      setDepositSuccessMessage(response.msg);\n      window.location.reload(false);\n    } else {\n      setDepositErrorMessage(response.msg);\n    }\n\n    setisSubmitting(false);\n  };\n\n  const onSubmitWitrhdraw = async () => {\n    setisSubmitting(true);\n\n    const data = {\n      account_balance,\n    };\n\n    const response = await Api.withdraw(user_id, data);\n    if (response && response.status === 200) {\n      setDepositSuccessMessage(response.msg);\n      window.location.reload(false);\n    } else {\n      setDepositErrorMessage(response.msg);\n    }\n\n    setisSubmitting(false);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <nav className=\"navbar navbar-expand-lg navbar-light \">\n          <div className=\"container\">\n            \n            <a className=\"navbar-brand navs\" href=\"#\">\n              ThriftWithK\n            </a>\n            <button\n              className=\"navbar-toggler\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#navbarSupportedContent\"\n              aria-controls=\"navbarSupportedContent\"\n              aria-expanded=\"false\"\n              aria-label=\"Toggle navigation\"\n            >\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div\n              className=\"collapse navbar-collapse\"\n              id=\"navbarSupportedContent\"\n            >\n              <ul className=\"navbar-nav  mb-2 mb-lg-0 ml-auto\">\n                <li className='nav-item marg'>\n                <Link className=\"nav-link text-dark \" to=\"/\">\n                    Home\n                  </Link>\n                </li>\n                <li className=\"nav-item marg\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-success\"\n                    onClick={() => {\n                      setShowDepositModal(true);\n                    }}\n                  >\n                    Deposit\n                  </button>\n                </li>\n                <li className=\"nav-item\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => {\n                      showWithdrawModal(true);\n                    }}\n                  >\n                    Withdraw\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\\\">\n          {data.map((user) => {\n            return (\n              <div key={user.slug} className=\"col-md-6 mt-4\">\n                <div\n                  className=\"shadow p-3 mb-5 rounded\"\n                  style={{ backgroundColor: \"##525f7f\" }}\n                >\n                  <div className=\"card-body\">\n                    <table className=\"table align-items-center\">\n                      {/* <thead className=\"mb-5\"> ACOOUNT INFOMATION </thead> */}\n                      <tbody className=\"mt-5\">\n                        <tr>\n                          <th>ACCOUNT NAME</th>\n                          <td> {user.FullName} </td>\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <th>ACCOUNT NUMBER</th>\n                          <td> {user.Account_Number} </td>\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <th> ACCOUNT BALANCE </th>\n                          <td> {user.Account_Balance} </td>\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <th>Mobile Number </th>\n                          <td> {user.Mobile_Number} </td>\n                          <td></td>\n                        </tr>\n                        {/* <tr>\n                          <th>Email</th>\n                          <td> {user.email} </td>\n                          <td></td>\n                        </tr> */}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-5\">\n            <div\n              className=\"shadow p-3 mb-5 rounded\"\n              style={{ backgroundColor: \"##525f7f\" }}\n            >\n              <div className=\"card-body\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Amount</th>\n                      <th className=\"marg\" scope=\"col\">\n                        Transaction Type\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {trandata.map((tran, id) => {\n                      return (\n                        <tr key={id}>\n                          <td> {tran.amount} </td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td></td>\n                          <td\n                            className={`${\n                              tran.transaction_type === \"DEPOSIT\"\n                                ? \"text-success\"\n                                : \"text-danger\"\n                            }`}\n                          >\n                            {\" \"}\n                            {tran.transaction_type}{\" \"}\n                          </td>\n                          <td></td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\">\n        <Modal isOpen={showDepositModal}>\n          <ModalHeader>Deposit</ModalHeader>\n          {depositSuccessMessage && depositSuccessMessage !== \"\" && (\n            <div className=\"alert alert-success\" role=\"alert\">\n              {depositSuccessMessage}\n            </div>\n          )}\n          {depositErrorMessage && depositErrorMessage !== \"\" && (\n            <div className=\"alert alert-success\" role=\"alert\">\n              {depositErrorMessage}\n            </div>\n          )}\n          {validationErrors &&\n            validationErrors[\"account_balance\"] &&\n            Object.entries(validationErrors).length >= 1 && (\n              <div className=\"alert alert-info\" role=\"alert\">\n                <ul>\n                  {Object.keys(validationErrors).map((keys, index) => {\n                    return (\n                      <li key={index} className=\"text-black-50\">\n                        {validationErrors[keys]}\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            )}\n          <ModalBody>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleInputEmail1\" className=\"mb-3\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  onChange={(e) => {\n                    if (!e.target.value) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (e.target.value) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                    setaccount_balance(e.target.value);\n                  }}\n                  value={account_balance}\n                  onBlur={() => {\n                    if (!account_balance) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (account_balance) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                  }}\n                />\n              </div>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            {isSubmitting ? (\n              <button className=\"btn btn-primary\" type=\"button\" disabled>\n                <span\n                  className=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                Loading...\n              </button>\n            ) : (\n              <>\n                <Button color=\"primary\" onClick={onSubmitDeposit}>\n                  Deposit\n                </Button>\n                <Button color=\"danger\" onClick={toggle}>\n                  Cancel\n                </Button>\n              </>\n            )}\n          </ModalFooter>\n        </Modal>\n      </div>\n\n      <div className=\"container\">\n        <Modal isOpen={withdrawModal}>\n          <ModalHeader>Deposit</ModalHeader>\n          {depositSuccessMessage && depositSuccessMessage !== \"\" && (\n            <div className=\"alert alert-info\" role=\"alert\">\n              {depositSuccessMessage}\n            </div>\n          )}\n          {depositErrorMessage && depositErrorMessage !== \"\" && (\n            <div className=\"alert alert-info\" role=\"alert\">\n              {depositErrorMessage}\n            </div>\n          )}\n          {validationErrors &&\n            validationErrors[\"account_balance\"] &&\n            Object.entries(validationErrors).length >= 1 && (\n              <div className=\"alert alert-info\" role=\"alert\">\n                <ul>\n                  {Object.keys(validationErrors).map((keys, index) => {\n                    return (\n                      <li key={index} className=\"text-black-50\">\n                        {validationErrors[keys]}\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            )}\n          <ModalBody>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"exampleInputEmail1\" className=\"mb-3\">\n                  Amount\n                </label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  onChange={(e) => {\n                    if (!e.target.value) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (e.target.value) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                    setaccount_balance(e.target.value);\n                  }}\n                  value={account_balance}\n                  onBlur={() => {\n                    if (!account_balance) {\n                      setvalidationErrors({\n                        ...validationErrors,\n                        account_balance: \"Amount is required\",\n                      });\n                    }\n                    if (account_balance) {\n                      delete validationErrors[\"account_balance\"];\n                    }\n                  }}\n                />\n              </div>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            {isSubmitting ? (\n              <button className=\"btn btn-primary\" type=\"button\" disabled>\n                <span\n                  className=\"spinner-border spinner-border-sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                Loading...\n              </button>\n            ) : (\n              <>\n                <Button color=\"primary\" onClick={onSubmitWitrhdraw}>\n                  Withdraw\n                </Button>\n                <Button color=\"danger\" onClick={toggle}>\n                  Cancel\n                </Button>\n              </>\n            )}\n          </ModalFooter>\n        </Modal>\n      </div>\n    </>\n  );\n}\n",{"ruleId":"46","severity":1,"message":"47","line":24,"column":11,"nodeType":"48","endLine":24,"endColumn":53},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":40,"column":27,"nodeType":"55","messageId":"56","endLine":40,"endColumn":29},{"ruleId":"49","replacedBy":"57"},{"ruleId":"51","replacedBy":"58"},{"ruleId":"46","severity":1,"message":"47","line":38,"column":13,"nodeType":"48","endLine":38,"endColumn":55},{"ruleId":"53","severity":1,"message":"54","line":150,"column":51,"nodeType":"55","messageId":"56","endLine":150,"endColumn":53},{"ruleId":"59","severity":1,"message":"60","line":41,"column":6,"nodeType":"61","endLine":41,"endColumn":8,"suggestions":"62"},{"ruleId":"46","severity":1,"message":"47","line":91,"column":13,"nodeType":"48","endLine":91,"endColumn":55},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["63"],"no-negated-in-lhs",["64"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["63"],["64"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'user_id'. Either include it or remove the dependency array.","ArrayExpression",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [user_id]",{"range":"68","text":"69"},[1525,1527],"[user_id]"]